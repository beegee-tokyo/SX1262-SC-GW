env:
  global:
    - ARDUINO_IDE_VERSION="1.8.9"
  matrix:
    - BOARD="esp8266:esp8266:generic:xtal=80,ResetMethod=ck,CrystalFreq=26,FlashFreq=40,FlashMode=qio,eesz=512K"
    - BOARD="esp32:esp32:esp32:FlashFreq=80,FlashSize=4M"
#    - BOARD="adafruit:nrf52:feather52832"

before_install:
  # install Arduino IDE
  - wget https://downloads.arduino.cc/arduino-$ARDUINO_IDE_VERSION-linux64.tar.xz
  - tar xf arduino-$ARDUINO_IDE_VERSION-linux64.tar.xz
  - mv arduino-$ARDUINO_IDE_VERSION $HOME/arduino-ide
  - export PATH=$PATH:$HOME/arduino-ide

  # firewall Arduino IDE noise (https://github.com/per1234/arduino-ci-script/issues/1#issuecomment-504158113)
  - sudo iptables -P INPUT DROP
  - sudo iptables -P FORWARD DROP
  - sudo iptables -P OUTPUT ACCEPT
  - sudo iptables -A INPUT -i lo -j ACCEPT
  - sudo iptables -A OUTPUT -o lo -j ACCEPT
  - sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

  # install 3rd party boards
  - arduino --pref "boardsmanager.additional.urls=http://arduino.esp8266.com/stable/package_esp8266com_index.json,https://dl.espressif.com/dl/package_esp32_index.json,https://adafruit.github.io/arduino-board-index/package_adafruit_index.json" --save-prefs 2>&1
  - if [[ "$BOARD" =~ "esp8266:esp8266:" ]]; then
      arduino --install-boards esp8266:esp8266;
    fi
  - if [[ "$BOARD" =~ "esp32:esp32:" ]]; then
      arduino --install-boards esp32:esp32;
    fi
  - if [[ "$BOARD" =~ "adafruit:nrf52:" ]]; then
      arduino --install-boards adafruit:nrf52;
    fi

# create directory to save the library and create symbolic link
install:
  - mkdir -p $HOME/Arduino/libraries
  - ln -s $PWD $HOME/Arduino/libraries/SX1272-Arduino

# only build the master branch
branches:
  only:
    - master

script:
  # build all example sketches
  - |
    for example in $(find $PWD/examples -name '*.ino' | sort); do
      # check whether to skip this sketch
      if [ ! -z "$SKIP_PAT" ] && [[ ${example} =~ $SKIP_PAT ]]; then
        # skip sketch
        echo -e "\n\033[1;33mSkipped ${example##*/} (matched with $SKIP_PAT)\033[0m";
      else
        # build sketch
        echo -e "\n\033[1;33mBuilding ${example##*/} ... \033[0m";
        arduino --verify --board $BOARD $example;
        if [ $? -ne 0 ]; then
          echo -e "\033[1;31m${example##*/} build FAILED\033[0m\n";
          exit 1;
        else
          echo -e "\033[1;32m${example##*/} build PASSED\033[0m\n";
        fi
      fi
    done

  # generate Doxygen documentation (only for Arduino UNO)
  - if [ $BOARD = "esp32:esp32:esp32" ]; then
      sudo apt-get update;
      sudo apt-get install -y doxygen;
      doxygen Doxyfile;
    fi

# deploy Doxygen docs on master branch and only when building for Arduino UNO
deploy:
  provider: pages
  skip_cleanup: true
  local_dir: docs/html
  github_token: $GH_REPO_TOKEN
  on:
    branch: master
    condition: $BOARD = "esp32:esp32:esp32"
